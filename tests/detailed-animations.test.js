import { test, expect } from '@playwright/test';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

test.describe('–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π', () => {
  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–æ–ª–ª-–∞–Ω–∏–º–∞—Ü–∏–π –≤–æ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö', async ({ page }) => {
    const variants = ['variant1', 'variant2', 'variant3'];
    
    for (const variant of variants) {
      console.log(`\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${variant} ===`);
      
      const filePath = `file:///${projectRoot.replace(/\\/g, '/')}/${variant}/full-page.html`;
      await page.goto(filePath);
      await page.waitForLoadState('networkidle');
      await page.waitForTimeout(1000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∏–º–∞—Ü–∏–π
      const systemLoaded = await page.evaluate(() => {
        return typeof window.scrollAnimations !== 'undefined';
      });
      
      expect(systemLoaded).toBe(true);
      console.log(`‚úì –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∏–º–∞—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const initialStats = await page.evaluate(() => {
        return window.scrollAnimations.getStats();
      });
      
      console.log(`üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, initialStats);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ viewport
      const viewportHeight = await page.evaluate(() => window.innerHeight);
      
      // –°–∫—Ä–æ–ª–ª–∏–º –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—ç—Ç–∞–ø–Ω–æ
      const scrollSteps = 5;
      const scrollStep = viewportHeight / scrollSteps;
      
      for (let i = 1; i <= scrollSteps; i++) {
        await page.evaluate((step) => {
          window.scrollTo(0, step);
        }, scrollStep * i);
        
        await page.waitForTimeout(500); // –ñ–¥–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
        
        const stats = await page.evaluate(() => {
          return window.scrollAnimations.getStats();
        });
        
        console.log(`üìè –®–∞–≥ ${i} (—Å–∫—Ä–æ–ª–ª –¥–æ ${scrollStep * i}px):`, stats);
      }
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const finalStats = await page.evaluate(() => {
        return window.scrollAnimations.getStats();
      });
      
      console.log(`üèÅ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, finalStats);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç
      expect(finalStats.completed).toBeGreaterThan(initialStats.completed);
      expect(finalStats.animated).toBeGreaterThan(0);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –∫–ª–∞—Å—Å—ã
      const animatedElements = await page.locator('.animated-in').count();
      const visibleElements = await page.locator('.is-visible').count();
      
      expect(animatedElements).toBe(finalStats.animated);
      expect(visibleElements).toBe(finalStats.animated);
      
      console.log(`‚úì –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –¥–ª—è ${variant}`);
    }
  });
  
  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –∞–Ω–∏–º–∞—Ü–∏–∏', async ({ page }) => {
    const filePath = `file:///${projectRoot.replace(/\\/g, '/')}/variant1/full-page.html`;
    await page.goto(filePath);
    await page.waitForLoadState('networkidle');
    
    // –í–∫–ª—é—á–∞–µ–º debug —Ä–µ–∂–∏–º
    await page.evaluate(() => {
      if (window.scrollAnimations) {
        window.scrollAnimations.options.debug = true;
      }
    });
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-delay
    const elementsWithDelay = await page.evaluate(() => {
      const elements = document.querySelectorAll('[data-delay]');
      return Array.from(elements).map(el => ({
        tagName: el.tagName,
        className: el.className,
        delay: el.dataset.delay
      }));
    });
    
    console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π:', elementsWithDelay);
    
    // –°–∫—Ä–æ–ª–ª–∏–º –¥–æ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    if (elementsWithDelay.length > 0) {
      await page.evaluate(() => {
        window.scrollTo(0, window.innerHeight);
      });
      
      await page.waitForTimeout(2000); // –ñ–¥–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      
      const animatedCount = await page.locator('.animated-in').count();
      expect(animatedCount).toBeGreaterThan(0);
    }
  });
  
  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–π', async ({ page }) => {
    const filePath = `file:///${projectRoot.replace(/\\/g, '/')}/variant3/full-page.html`;
    await page.goto(filePath);
    await page.waitForLoadState('networkidle');
    
    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const initTime = await page.evaluate(() => {
      const start = performance.now();
      // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
      if (window.scrollAnimations) {
        window.scrollAnimations.refresh();
      }
      const end = performance.now();
      return end - start;
    });
    
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${initTime.toFixed(2)}ms`);
    expect(initTime).toBeLessThan(100); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 100ms
    
    // –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∫—Ä–æ–ª–ª–∞
    const scrollStart = await page.evaluate(() => performance.now());
    
    for (let i = 0; i < 10; i++) {
      await page.evaluate((step) => {
        window.scrollBy(0, 100);
      });
      await page.waitForTimeout(50);
    }
    
    const scrollEnd = await page.evaluate(() => performance.now());
    const scrollTime = scrollEnd - scrollStart;
    
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è —Å–∫—Ä–æ–ª–ª–∞ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏: ${scrollTime.toFixed(2)}ms`);
    expect(scrollTime).toBeLessThan(2000); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º
  });
});